package utils

import (
	"os"
	"path/filepath"
	"testing"

	"github.com/alexandreLITHAUD/gitctx/internal/paths"
	"github.com/alexandreLITHAUD/gitctx/internal/utils"
)

func TestDoesContextFileExists(t *testing.T) {

	tmpDir := t.TempDir()
	paths.OverrideConfigFolderPath(tmpDir)
	utils.CreateGitctxConfigFolder()

	// Assuming the context file "exampleContext" does not exist
	contextName := "exampleContext"
	exists := utils.DoesContextFileExists(contextName)
	if exists {
		t.Errorf("Expected context file '%s' to not exist, but it does.", contextName)
	}

	// You can add more tests here, including cases where the file does exist.
	err := os.WriteFile(filepath.Join(paths.GetGitctxConfigFolderPath(), contextName), []byte("test data"), 0644)
	if err != nil {
		t.Fatalf("Failed to create test context file: %v", err)
	}

	exists = utils.DoesContextFileExists(contextName)
	if !exists {
		t.Errorf("Expected context file '%s' to exist, but it does not.", contextName)
	}

	t.Logf("TestDoesContextDFileExists Passed !")
}

func TestCreateGitctxContextFromScratch(t *testing.T) {

	tmpDir := t.TempDir()
	paths.OverrideConfigFolderPath(tmpDir)
	utils.CreateGitctxConfigFolder()

	contextName := "newContext"

	err := utils.CreateGitctxContextFromScratch(contextName)
	if err != nil {
		t.Fatalf("Error creating context from scratch: %v", err)
	}

	// Verify the file was created
	if !utils.DoesContextFileExists(contextName) {
		t.Errorf("Expected context file '%s' to exist after creation, but it does not.", contextName)
	}

	// Optionally, you can read the file and verify its contents
	content, err := os.ReadFile(filepath.Join(paths.GetGitctxConfigFolderPath(), contextName))
	if err != nil {
		t.Fatalf("Error reading created context file: %v", err)
	}

	expectedContent := "# Context generated by gitctx\n"
	if string(content) != expectedContent {
		t.Errorf("Context file content mismatch. Expected: '%s', Got: '%s'", expectedContent, string(content))
	}

	t.Logf("TestCreateGitctxContextFromScratch Passed !")
}
