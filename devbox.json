{
  "$schema": "https://raw.githubusercontent.com/jetify-com/devbox/0.15.1/.schema/devbox.schema.json",
  "packages": [
    "go@1.24.5",
    "gosec@2.22.7",
    "go-tools@2025.1.1",
    "cobra-cli@1.3.0",
    "hugo@0.148.2",
    "go-junit-report@2.1.0"
  ],
  "shell": {
    "init_hook": [
      "echo 'üöÄ Go DevBox environment loaded!'",
      "echo \"Go version: $(go version)\"",
      "go mod download || echo 'No go.mod found yet'",
      "echo 'üöÄ Go mods downloaded.'"
    ],
    "scripts": {
      "dev": ["echo 'üîß Starting development environment...'", "go run ."],
      "build": [
        "echo 'üî® Building Go application...'",
        "mkdir -p ./dist/",
        "go build -o dist/app .",
        "echo '‚úÖ Build complete: ./dist/app'"
      ],
      "test": ["echo 'üß™ Running tests...'", "go test -v ./tests/..."],
      "test-junit": [
        "echo 'üß™ Running tests with JUnit report...'",
        "mkdir -p ./dist/tests",
        "go test -v ./tests/... | go-junit-report -set-exit-code > ./dist/tests/junit-report.xml",
        "echo '‚úÖ JUnit report generated in: dist/tests/junit-report.xml'"
      ],
      "coverage": [
        "echo 'üìä Running tests with coverage...'",
        "mkdir -p ./dist/coverage",
        "go test -race -coverprofile=./dist/coverage/coverage.out -covermode=atomic -coverpkg=./... ./tests/...",
        "go tool cover -html=./dist/coverage/coverage.out -o ./dist/coverage/coverage.html",
        "go tool cover -func=./dist/coverage/coverage.out | grep total | awk '{print $3}' > ./dist/coverage/coverage.txt",
        "echo '‚úÖ Coverage report generated in : ./dist/coverage/coverage.html'"
      ],
      "benchmark": [
        "echo '‚ö° Running benchmarks...'",
        "mkdir -p ./dist/benchmark",
        "go test -bench=. -benchmem -run=^$ ./tests/... | tee ./dist/benchmark/benchmark.txt",
        "echo '‚úÖ Benchmark results saved to ./dist/benchmark/benchmark.txt'"
      ],
      "clean": [
        "echo 'üßπ Cleaning build artifacts...'",
        "rm -rf dist/",
        "go clean"
      ],
      "deps": [
        "echo 'üì¶ Installing dependencies...'",
        "go mod tidy",
        "go mod download"
      ],
      "fmt": ["echo 'üé® Formatting Go code...'", "go fmt ./..."],
      "lint": [
        "echo 'üîç Linting Go code...'",
        "go vet ./...",
        "staticcheck ./..."
      ],
      "security": [
        "echo 'üîí Running security checks with gosec...'",
        "gosec --no-fail -fmt sarif -out ./dist/security/security-report.sarif ./..."
      ],
      "doc-gen": [
        "echo 'üìÑ Generating documentation...'",
        "go run generateDocs.go",
        "echo '‚úÖ Documentation generated in ./docs/content.en/docs/commands'",
        "cp ./docs/content.en/docs/commands/[!_]*.md ./docs/content.fr/docs/commands/",
        "echo '‚úÖ Documentation copied to French directory ./docs/content.fr/docs/commands/'"
      ],
      "doc-server": [
        "echo 'üìö Starting documentation server...'",
        "cd ./docs",
        "hugo server --minify"
      ],
      "doc-build": [
        "echo 'üì¶ Building documentation...'",
        "cd ./docs",
        "hugo --minify",
        "echo '‚úÖ Documentation built in ./docs/public'"
      ],
      "install": ["echo 'üì• Installing application...'", "go install ."],
      "deploy": [
        "echo 'üöÄ Building production binaries from os.data and arch.data...'",
        "OSS_TYPE=$(cat os.os_type) || (echo 'No os.os_type found' && exit 1)",
        "ARCH_TYPE=$(cat arch.os_type) || (echo 'No arch.os_type found' && exit 1)",
        "VERSION=$(git describe --tags --always | sed 's/^v//')",
        "mkdir -p ./dist/executables/",
        "for os in $OSS_TYPE; do",
        "  for arch in $ARCH_TYPE; do",
        "    echo \"Building for OS: $os, ARCH: $arch\"",
        "    BASE_NAME=gitctx-$VERSION-$os-$arch",
        "    BIN_NAME=$BASE_NAME",
        "    if [ \"$os\" = \"windows\" ]; then",
        "      BIN_NAME=\"$BIN_NAME.exe\"",
        "    fi",
        "    GOOS=$os GOARCH=$arch go build -ldflags=\"-s -w -X github.com/alexandreLITHAUD/gitctx/cmd.Version=$VERSION\" -trimpath -tags=netgo,osusergo -o ./dist/executables/$BIN_NAME .",
        "    chmod +x ./dist/executables/$BIN_NAME",
        "    tar -czf ./dist/executables/$BASE_NAME.tar.gz -C ./dist/executables $BIN_NAME",
        "    rm -f ./dist/executables/$BIN_NAME",
        "  done",
        "done",
        "echo '‚úÖ All binaries built in ./dist/executables'"
      ],
      "all": [
        "echo 'üîÑ Running full CI pipeline...'",
        "devbox run fmt",
        "devbox run lint",
        "devbox run security",
        "devbox run test",
        "devbox run coverage",
        "devbox run build"
      ]
    }
  }
}
